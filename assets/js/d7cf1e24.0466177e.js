"use strict";(self.webpackChunkmy_doc_website=self.webpackChunkmy_doc_website||[]).push([[2155],{564:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>o});var r=a(5669),i=a(4848),t=a(8453);const l={slug:"Middleware Laravel 12",title:"Memahami cara kerja Midellware pada Laravel 12",authors:["jihadul4kbar"],tags:["Tutorial","Laravel","Web","Web Software Developer"]},s="Middleware",u={authorsImageUrls:[void 0]},o=[{value:"Membuat User Autentikasi",id:"membuat-user-autentikasi",level:2},{value:"1. Menambahkan kolom role pada tabel <code>user</code>.",id:"1-menambahkan-kolom-role-pada-tabel-user",level:3},{value:"2. Tambahkan Konstanta Role di <code>Model User</code>",id:"2-tambahkan-konstanta-role-di-model-user",level:3},{value:"3. Membuat Middleware Role",id:"3-membuat-middleware-role",level:3},{value:"4. Daftarkan Middleware Role ke Kernel",id:"4-daftarkan-middleware-role-ke-kernel",level:3},{value:"5. Routing Berdasarkan Role",id:"5-routing-berdasarkan-role",level:3},{value:"6. Menambah user ke dalam tabel user berdasarkan role",id:"6-menambah-user-ke-dalam-tabel-user-berdasarkan-role",level:3},{value:"7. Membuat Login dan Logout",id:"7-membuat-login-dan-logout",level:3},{value:"Route Lengkap",id:"route-lengkap",level:3},{value:"Refrensi",id:"refrensi",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Middleware menyediakan mekanisme yang mudah untuk memeriksa dan memfilter permintaan HTTP yang masuk ke aplikasi Anda. Misalnya, Laravel menyertakan middleware yang memverifikasi bahwa pengguna aplikasi Anda telah diautentikasi. Jika pengguna tidak diautentikasi, middleware akan mengarahkan pengguna ke layar login aplikasi Anda. Namun, jika pengguna diautentikasi, middleware akan memungkinkan permintaan untuk berlanjut lebih jauh ke dalam aplikasi.[1]"}),"\n",(0,i.jsx)(n.h2,{id:"membuat-user-autentikasi",children:"Membuat User Autentikasi"}),"\n",(0,i.jsx)(n.p,{children:"Membuat autentikasi pengguna dengan Laravel 12, menggunakan role yang disimpan di dalam tabel users dengan tahapan sebagai berikut."}),"\n",(0,i.jsxs)(n.h3,{id:"1-menambahkan-kolom-role-pada-tabel-user",children:["1. Menambahkan kolom role pada tabel ",(0,i.jsx)(n.code,{children:"user"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Buka file migrasi ",(0,i.jsx)(n.code,{children:"database/migrations/xxxx_xx_xx_create_users_table.php"}),"\r\nTambahkan kode berikut di bagian kolom tabel:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="database/migrations/xxxx_xx_xx_create_users_table.php"',children:"     $table->enum('role', ['admin', 'petugas', 'pimpinan'])->default('petugas');\n"})}),"\n",(0,i.jsxs)(n.p,{children:["kode ini berfungsi untuk membuat role dengan tiga lever user yakni ",(0,i.jsx)(n.code,{children:"admin, petugas, dan pimpinan"})," dimana role secara bawaannya adalah ",(0,i.jsx)(n.code,{children:"petugas"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Jalankan migrasi untuk update struktur tabel pada database :\r\n",(0,i.jsx)(n.code,{children:"php artisan migrate:fresh"}),"\r\n",(0,i.jsx)(n.code,{children:"migrate:fresh"})," akan menghapus semua tabel lalu menjalankan ulang semua migrasi dari awal."]}),"\n",(0,i.jsxs)(n.h3,{id:"2-tambahkan-konstanta-role-di-model-user",children:["2. Tambahkan Konstanta Role di ",(0,i.jsx)(n.code,{children:"Model User"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="app/Models/User.php"',children:"    protected $fillable = [\r\n        'name',\r\n        'email',\r\n        'password',\r\n        'role', // Tambahkan atribut role\r\n    ];\r\n\r\n    // Helper methods untuk check role\r\n    public function isAdmin()\r\n    {\r\n        return $this->role === 'admin';\r\n    }\r\n\r\n    public function isPetugas()\r\n    {\r\n        return $this->role === 'petugas';\r\n    }\r\n\r\n    public function isPimpinan()\r\n    {\r\n        return $this->role === 'pimpinan';\r\n    }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Penjelasan\r\n",(0,i.jsx)(n.code,{children:" 'role', // Tambahkan atribut role"}),"\r\nAtribut role ditambahkan agar bisa menyimpan peran pengguna, seperti admin, petugas, atau pimpinan."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    public function isAdmin()\r\n    {\r\n        return $this->role === 'admin';\r\n    }\n"})}),"\n",(0,i.jsx)(n.p,{children:"Fungsi ini mengembalikan true jika nilai role dari user adalah 'admin'.\r\nFungsinya untuk memudahkan pengecekan apakah user adalah admin.\r\nKode ini merupakan bagian dari sistem manajemen user dengan role-based access. Dengan adanya helper method seperti isAdmin(), kamu bisa lebih mudah mengatur hak akses di controller, middleware, atau view, contohnya:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"if (auth()->user()->isAdmin()) {\r\n    // Akses khusus untuk admin\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-membuat-middleware-role",children:"3. Membuat Middleware Role"}),"\n",(0,i.jsx)(n.p,{children:"Jalankan perintah berikut untuk membuat middleware CheckRole"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"php artisan make:middleware CheckRole\n"})}),"\n",(0,i.jsx)(n.p,{children:"Ganti isi file CheckRole dengan kode berikut"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="app/Http/Middleware/CheckRole.php"',children:"<?php\r\nnamespace App\\Http\\Middleware;\r\n\r\nuse Closure;\r\nuse Illuminate\\Http\\Request;\r\nuse Illuminate\\Support\\Facades\\Auth;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\n\r\nclass CheckRole\r\n{\r\n    public function handle(Request $request, Closure $next, ...$roles)\r\n    {\r\n        if(!Auth::check()) {\r\n            return redirect('/login'); // Redirect to login if not authenticated\r\n        }\r\n\r\n        if(!in_array(Auth::user()->role, $roles)) {\r\n            abort(403, 'Unauthorized');\r\n        }\r\n\r\n        return $next($request);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Penjelasan"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"...$roles"}),": Mengizinkan kita mengirim lebih dari satu role."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"in_array(...)"}),": Cek apakah role user cocok dengan salah satu role yang diizinkan."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"abort(403)"}),": Jika tidak cocok, akses ditolak."]}),"\n",(0,i.jsx)(n.h3,{id:"4-daftarkan-middleware-role-ke-kernel",children:"4. Daftarkan Middleware Role ke Kernel"}),"\n",(0,i.jsxs)(n.p,{children:["Agar midlleware dapat berfungsi perlu dilakukan register middleware pada ",(0,i.jsx)(n.code,{children:"bootstrap/app.php"}),"\r\ntambahkan kode berikut pada pada file app.php"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="bootstrap/app.php"',children:"<?php\r\nuse App\\Http\\Middleware\\CheckRole;\r\nuse Illuminate\\Foundation\\Application;\r\nuse Illuminate\\Foundation\\Configuration\\Exceptions;\r\nuse Illuminate\\Foundation\\Configuration\\Middleware;\r\n\r\nreturn Application::configure(basePath: dirname(__DIR__))\r\n    ->withRouting(\r\n        web: __DIR__.'/../routes/web.php',\r\n        commands: __DIR__.'/../routes/console.php',\r\n        health: '/up',\r\n    )\r\n    ->withMiddleware(function (Middleware $middleware): void {\r\n        // Register alias middleware (untuk digunakan pada route)\r\n        $middleware->alias(['role' => CheckRole::class]);\r\n    })\r\n    ->withExceptions(function (Exceptions $exceptions): void {\r\n        //\r\n    })->create();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["perhatikan pada bagian ",(0,i.jsx)(n.code,{children:" $middleware->alias(['role' => CheckRole::class]);"}),"\r\ndigunakan untuk memberi nama ",(0,i.jsx)(n.code,{children:"role"})," untuk middleware kita agar bisa digunakan dalam route seperti",(0,i.jsx)(n.code,{children:" middleware('role:admin')"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"5-routing-berdasarkan-role",children:"5. Routing Berdasarkan Role"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="routes/web.php"',children:"use Illuminate\\Support\\Facades\\Route;\r\n\r\nRoute::get('/', function () {\r\n    return view('welcome');\r\n});\r\n\r\n// Semua user yang sudah login\r\nRoute::middleware(['auth'])->group(function () {\r\n    Route::get('/dashboard', function () {\r\n        return view('dashboard');\r\n    });\r\n    // Khusus admin\r\n    Route::middleware(['role:admin'])->group(function () {\r\n        Route::get('/admin', function () {\r\n            return \"Selamat datang Admin!\";\r\n        });\r\n       // Route::resource('user', UserController::class);\r\n    });\r\n    // Khusus petugas biasa\r\n    Route::middleware(['role:petugas'])->group(function () {\r\n        Route::get('/petugas', function () {\r\n            return \"Selamat datang petugas!\";\r\n        });\r\n        //Route::resource('/petugas', FiturPetugasController::class);\r\n    });\r\n    // Khusus pimpinan biasa\r\n    Route::middleware(['role:Pimpinan'])->group(function () {\r\n        Route::get('/pimpinan', function () {\r\n            return \"Selamat datang Pimpinan!\";\r\n        });\r\n        //Route::resource('/lapaoran', LaporanController::class);\r\n    });\r\n    // Khusus admin dan petugas biasa\r\n    Route::middleware(['role:admin,petugas'])->group(function () {\r\n        Route::get('/transaksi', function () {\r\n            return \"Selamat datang petugas atau admin!\";\r\n        });\r\n        //Route::resource('/transaksi', TransaksiController::class);\r\n    });\r\n});\r\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"Penjelasan:"}),"\n",(0,i.jsxs)(n.p,{children:["Middleware ",(0,i.jsx)(n.code,{children:"auth:"})," Pastikan hanya user login yang bisa akses."]}),"\n",(0,i.jsxs)(n.p,{children:["Middleware ",(0,i.jsx)(n.code,{children:"role:admin"}),": Hanya bisa diakses user yang role-nya 'admin'."]}),"\n",(0,i.jsxs)(n.p,{children:["Middleware ",(0,i.jsx)(n.code,{children:"role:petugas"}),": Hanya untuk user dengan role petugas."]}),"\n",(0,i.jsxs)(n.p,{children:["Middleware ",(0,i.jsx)(n.code,{children:"role:pimpinan"}),": Hanya untuk user dengan role pimpinan."]}),"\n",(0,i.jsxs)(n.p,{children:["Middleware ",(0,i.jsx)(n.code,{children:"role:admin,petugas"}),": Hanya untuk user role admin dan petugas."]}),"\n",(0,i.jsx)(n.h3,{id:"6-menambah-user-ke-dalam-tabel-user-berdasarkan-role",children:"6. Menambah user ke dalam tabel user berdasarkan role"}),"\n",(0,i.jsx)(n.p,{children:"jalankan perintah pada terminal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"php artisan tinker\n"})}),"\n",(0,i.jsx)(n.p,{children:"selanjutnya tambahkan user dengan perintah berikut"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DB::table('users')->insert(['name' => 'Admin','email' => 'admin@contoh.com','password' => Hash::make('12345678'),'role' => 'admin']);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["perintah untuk menambah user dengan nama ",(0,i.jsx)(n.code,{children:"Admin, email admin@contoh.com, password 12345678 dan role admin"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DB::table('users')->insert(['name' => 'Petugas','email' => 'petugas@contoh.com','password' => Hash::make('12345678'),'role' => 'petugas']);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["perintah untuk menambah user dengan nama ",(0,i.jsx)(n.code,{children:"Petugas, email petugas@contoh.com, password 12345678 dan role petugas"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DB::table('users')->insert(['name' => 'Pimpinan','email' => 'pimpinan@contoh.com','password' => Hash::make('12345678'),'role' => 'pimpinan']);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["perintah untuk menambah user dengan nama ",(0,i.jsx)(n.code,{children:"Pimpinan, email pimpinan@contoh.com, password 12345678 dan role pimpinan"})]}),"\n",(0,i.jsx)(n.h3,{id:"7-membuat-login-dan-logout",children:"7. Membuat Login dan Logout"}),"\n",(0,i.jsxs)(n.p,{children:["jalankan perintah berikut untuk membuat ",(0,i.jsx)(n.code,{children:"AuthController.php"})," pada folder Auth"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"php artisan make:controller Auth/AuthController\n"})}),"\n",(0,i.jsx)(n.p,{children:"setelah berhasil maka buka file tersebut dan isi dengan kode berikut"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="app\\Http\\Controllers\\Auth\\AuthController.php"',children:"<?php\r\nnamespace App\\Http\\Controllers\\Auth;\r\n\r\nuse Illuminate\\Http\\Request;\r\nuse App\\Http\\Requests\\LoginRequest;\r\nuse App\\Http\\Controllers\\Controller;\r\nuse Illuminate\\Support\\Facades\\Auth;\r\n\r\nclass AuthController extends Controller\r\n{\r\n    public function showLoginForm()\r\n    {\r\n        return view('auth.login');\r\n    }\r\n\r\n    public function login(Request $request)\r\n    {\r\n        // Validasi input\r\n        $credentials = $request->validate([\r\n            'email' => 'required|email',\r\n            'password' => 'required|min:6',\r\n        ]);\r\n\r\n        // Coba login\r\n        if (Auth::attempt($credentials)) {\r\n            $user = Auth::user();\r\n            return redirect()->route('dashboard'); // Redirect ke dashboard setelah login\r\n        }\r\n\r\n        // Jika gagal, kembalikan dengan error\r\n        return back()->withErrors([\r\n            'email' => 'Email atau password salah.',\r\n        ])->withInput();\r\n    }\r\n    public function logout(Request $request)\r\n    {\r\n        Auth::logout();\r\n        $request->session()->invalidate();\r\n        $request->session()->regenerateToken();\r\n        return redirect('/login')->with('status', 'Anda telah berhasil logout.');\r\n    }\r\n}\r\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"membuat halaman login pada folder auth dengan nama login.blade.php"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="resources\\views\\auth\\login.blade.php"',children:'      <form action="{{ route(\'login\') }}" method="POST">\r\n        @csrf\r\n          <input type="email" name="email" required autocomplete="email" autofocus placeholder="Email">\r\n          @error(\'email\')\r\n              {{ $message }}\r\n          @enderror\r\n          <input type="password" name="password" placeholder="Password" required autocomplete="current-password">\r\n          @error(\'password\')\r\n              {{ $message }}\r\n          @enderror\r\n            <button type="submit">Sign In</button>\r\n      </form>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Selanjutnya membuat halaman dashbord.blade.php"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="resources\\views\\dashbord.blade.php"',children:'<h3>Selamat datang {{ auth()->user()->name }}</h3>\r\n      Role : {{ auth()->user()->role }}\r\n  </div>\r\n\r\n  // untuk menamilkan menu berdasarkan user login \r\n\r\n  @if(auth()->user()isAdmin())\r\n  Menu Untuk Admin\r\n    <a href="">Menu Untuk Admin</a>\r\n  @endif\r\n        \r\n  @if(auth()->user()isPetugas())\r\n    Menu Untuk Pegugas\r\n    <a href="">Menu Untuk Petugas</a>\r\n  @endif\r\n\r\n  @if(auth()->user()isPimpinan())\r\n    Menu Untuk Pimpinan\r\n    <a href="">Menu Untuk pimpinan</a>\r\n  @endif\r\n\r\n  //link untuk logout\r\n    <form method="POST" action="{{ route(\'logout\') }}">\r\n        @csrf\r\n        <button type="submit">Logout</button>\r\n    </form>\r\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"route-lengkap",children:"Route Lengkap"}),"\n",(0,i.jsx)(n.p,{children:"berikut route lengkapnya"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="routes/web.php"',children:"use Illuminate\\Support\\Facades\\Route;\r\nuse App\\Http\\Controllers\\Auth\\AuthController;\r\n\r\nRoute::get('/', function () {\r\n    return view('welcome');\r\n});\r\n// Auth Routes\r\nRoute::controller(AuthController::class)->group(function () {\r\n    Route::get('login', 'showLoginForm')->name('login');\r\n    Route::post('login', 'login');\r\n    Route::post('logout', 'logout')->name('logout');\r\n});\r\n// Semua user yang sudah login\r\nRoute::middleware(['auth'])->group(function () {\r\n    Route::get('/dashboard', function () {\r\n        return view('dashboard');\r\n    });\r\n    // Khusus admin\r\n    Route::middleware(['role:admin'])->group(function () {\r\n        Route::get('/admin', function () {\r\n            return \"Selamat datang Admin!\";\r\n        });\r\n       // Route::resource('user', UserController::class);\r\n    });\r\n    // Khusus petugas biasa\r\n    Route::middleware(['role:petugas'])->group(function () {\r\n        Route::get('/petugas', function () {\r\n            return \"Selamat datang petugas!\";\r\n        });\r\n        //Route::resource('/petugas', FiturPetugasController::class);\r\n    });\r\n    // Khusus pimpinan biasa\r\n    Route::middleware(['role:Pimpinan'])->group(function () {\r\n        Route::get('/pimpinan', function () {\r\n            return \"Selamat datang Pimpinan!\";\r\n        });\r\n        //Route::resource('/lapaoran', LaporanController::class);\r\n    });\r\n    // Khusus admin dan petugas biasa\r\n    Route::middleware(['role:admin,petugas'])->group(function () {\r\n        Route::get('/transaksi', function () {\r\n            return \"Selamat datang petugas atau admin!\";\r\n        });\r\n        //Route::resource('/transaksi', TransaksiController::class);\r\n    });\r\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"refrensi",children:"Refrensi"}),"\n",(0,i.jsxs)(n.p,{children:["[1] ",(0,i.jsx)(n.a,{href:"https://laravel.com/docs/12.x/middleware",children:"https://laravel.com/docs/12.x/middleware"})]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>s});var r=a(6540);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}},5669:e=>{e.exports=JSON.parse('{"permalink":"/web/blog/Middleware Laravel 12","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-07-02-middleware-laravel-12/index.md","source":"@site/blog/2025-07-02-middleware-laravel-12/index.md","title":"Memahami cara kerja Midellware pada Laravel 12","description":"Middleware menyediakan mekanisme yang mudah untuk memeriksa dan memfilter permintaan HTTP yang masuk ke aplikasi Anda. Misalnya, Laravel menyertakan middleware yang memverifikasi bahwa pengguna aplikasi Anda telah diautentikasi. Jika pengguna tidak diautentikasi, middleware akan mengarahkan pengguna ke layar login aplikasi Anda. Namun, jika pengguna diautentikasi, middleware akan memungkinkan permintaan untuk berlanjut lebih jauh ke dalam aplikasi.[1]","date":"2025-07-02T00:00:00.000Z","tags":[{"inline":true,"label":"Tutorial","permalink":"/web/blog/tags/tutorial"},{"inline":true,"label":"Laravel","permalink":"/web/blog/tags/laravel"},{"inline":true,"label":"Web","permalink":"/web/blog/tags/web"},{"inline":true,"label":"Web Software Developer","permalink":"/web/blog/tags/web-software-developer"}],"readingTime":5.59,"hasTruncateMarker":false,"authors":[{"name":"Jihadul Akbar","title":"Lecturer of STMIK Lombok","url":"https://github.com/jihadul4kbar","page":{"permalink":"/web/blog/authors/jihadul-4-kbar"},"socials":{"x":"https://x.com/Jihadul4kbar","github":"https://github.com/jihadul4kbar"},"imageURL":"https://jihadul4kbar.github.io/assets/img/jihadulakbar.png","key":"jihadul4kbar"}],"frontMatter":{"slug":"Middleware Laravel 12","title":"Memahami cara kerja Midellware pada Laravel 12","authors":["jihadul4kbar"],"tags":["Tutorial","Laravel","Web","Web Software Developer"]},"unlisted":false,"nextItem":{"title":"Setup widgets for monitoring port on LibreLMS","permalink":"/web/blog/Add widgets monitoring port on Libre LMS"}}')}}]);